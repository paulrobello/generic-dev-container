version: "3.8"

services:
  dev:
    container_name: "${COMPOSE_PROJECT_NAME}-${DEV_CONTAINER_NAME-dev}"
    stdin_open: true
    tty: true
    networks:
      devnet:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ROOT_PW # sets root password in container
        - PULUMI_VERSION # install this version of pulumi
        - PHP_VERSION # 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1
        - USE_DOT_NET # install ubuntu:latest dotnet core packages
        - GOLANG_VERSION # install this golang version. blank for none. latest is 1.18
        - PYTHON_VERSION # install this python version
        - USE_AWS # install latest aws cli, ssm plugin, and ecr helper
        - NODE_VERSION # install this version of node. blank for none
        - USE_BITWARDEN # enable bitwarden workflow helpers. will enable NODE_VERSION=18 if not set
        - USE_JAVA # install ubuntu:latest openjdk packages
        - DOCKER_VERSION # install docker version inside container
        - DOCKER_COMPOSE_VERSION # install docker-compose version inside container
        - EXTRA_PACKAGES # any extra Ubuntu packages you want installed into the base container
        - AWS_VERSION # install AWS CLI version
    environment:
      - COMPOSE_PROJECT_NAME
      - PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - GDC_CONTAINER_NAME # name of GDC container running in docker
      - DOCKER_OS_PLATFORM # can be used to build containers for other arch's
      - HOST_PROJECT_PATH # helps with volume mounts if you run containers from within dev container
      - HOST_PROJECT_FOLDER_NAME # dirname $HOST_PROJECT_PATH
      - HOST_OS=${OS:-} # used to remap paths in windows format to linux format
      - USE_HOST_HOME # mount home directory from host
      - USE_HOME_BIN # copy bin folder from host home directory if it exists and USE_HOST_HOME=yes to container home directory
      - USE_PRECOMMIT # use pre-commit hooks in git to format and lint files
      - EDITOR # sets default editor in container. usually set to same as VISUAL
      - VISUAL # sets default editor in container. usually set to same as EDITOR
      - USE_COLOR_PROMPT # enable colored bash prompt
      - SSH_SERVER_PORT # host port you want forwarded to ssh server in container
      - SSH_KEYSCAN_HOSTS # copy ssh keys from these hosts to prevent unknown key prompts
      - USE_AUTH0 # starts up auth0 mock container in container only mode
      - USE_AUTH0_HOST # starts up auth0 mock container and forwards port from host. Use AUTH0_HOST_PORT to change default of 3001
      - AUTH0_HOST_PORT # defaults to 3001 if not specified. only used with USE_AUTH0_HOST
      - AUTH0_DOMAIN # url for hitting auth0 server
      - AUTH0_CONTAINER_NAME # set name of auth0 container so more than one can be used in parallel
      - AUTH0_LOCAL_USERS_FILE # used to specify location in container for auth0 to mount user override file
      - AUTH0_AUDIENCE # used to override auth0 audience default of app
      - AUTH0_DEFAULT_USER # used to auto-populate auth0 mock login page
      - AUTH0_DEFAULT_PASSWORD # used to auto-populate auth0 mock login page
      - LOCALSTACK_VOLUME_DIR # needed by LS v1.x. no effect when LS is not being used
      - USE_LOCALSTACK # does not install or start localstack. Only sets up some helpers
      - USE_LOCALSTACK_PERSISTENCE # toggle persistent storage for LS defaults to persistence enabled.
      - USE_LOCALSTACK_HOST # forwards localstack ports to host if LS_VERSION is set
      - LS_IMAGE # can override with custom image location. Still uses LS_VERSION to create final image location
      - LS_VERSION # starts up localstack with specified version >= 1.x.x.
      - LS_MAIN_CONTAINER_NAME # used by localstack
      - LOCALSTACK_API_KEY # required if you want to use localstack pro
      - LOCALSTACK_HOST_DNS_PORT # forward this port from host to localstack for DNS
      - PERSIST_BITWARDEN_SESSION # persist unlocked vault creds between container sessions
      - USE_AWS_HOME # copy .aws folder from host home if exists and USE_HOST_HOME=yes
      - AWS_IDENTITY_ACCOUNT # used by AWS assume-role.sh script
      - GIT_EMAIL # required for GIT if you don't have a .gitconfig in your home directory
      - GIT_NAME # required for GIT if you don't have a .gitconfig in your home directory
      - HOSTNAME_EXTERNAL # used by localstack
      - YARN_CACHE_FOLDER=/usr/local/share/.cache/yarn # cache yarn installs
      - PIP_CACHE_DIR=/usr/local/share/.cache/pip # cache pip installs
      - npm_config_cache=/usr/local/share/.cache/npm # case npm installs
      - GDC_ENTRYPOINT # run this command and exit unless GDC_RUN_MODE
      - GDC_DIR # contains host location of GDC folder
      - GDC_COMPOSE_FILES # contains list of all compose files in use by GDC
      - SHARED_VOLUMES # list of volumes shared between all GDCs
      - CUSTOM_PORTS # list of custom port forwards
      - DEVNET_NAME # name of dev network GDC is attached to
      - DEVNET_SUBNET # only populated if manually specified
      - DEVNET_GATEWAY # only populated if manually specified
      - GDC_RUN_MODE # start, stop, daemon, clean
      - CI_JOB_TOKEN # used for gitlab pipeline clones
      - CI_PROJECT_DIR # used for gitlab pipeline mounts
      - CI_JOB_ID # used for gitlab pipeline uuid
      - GIT_HASH # used for gitlab pipelines
      - GIT_SLUG # used for gitlab pipelines
      - HOST_CUSTOM_MOUNT # used to mount custom dir on host to /host_custom_mount in container
      - HOST_HOME # path to home directory of user on host
      - CHECK_UPDATES # check for GDC updates on each login
      - PARENT_GDC # if GDC is launched from inside another GDC this will be set to name of parent
      - NO_DEVNET_RM # if set to yes, GDC will not remove the DEVNET
      - STARTUP_MSG # message to display after startup
      - CLIPBOARD_MSG # used internally to show message about launch command copied to clipboard
      - COMPOSE_BIN # used to toggle between docker-compose and docker compose invocations
      - DEV_CONTAINER=1.6.5 # used to detect if running inside dev container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # allow container to interact with host docker
      - "${GDC_DIR}:/root/gdc-host" # mount gdc folder inside container to get access to compose files
      - bash_history:/root/bash_history # keep bash history between container builds
      - persisted:/root/persisted # put things you want to persist between container rebuilds here
      - shared:/root/shared # persisted and shared between stacks / containers
      - package_cache:/usr/local/share/.cache # persist npm, yarn and pip cache for faster rebuilds
      - pulumi:/root/.pulumi # persist pulumi plugin install
      - cache:/root/.cache # persist caches in ~/.cache folder
      - home_config:/root/.config # persist data for various apps such as bitwarden

volumes:
  bash_history: # persist bash history
  persisted: # put things you want to persist between container rebuilds here
  cache: # .cache folder in home dir
  pulumi:
    name: pulumi # persist pulumi plugin install across all stacks
    external: true
  package_cache: # persist npm, yarn and pip cache, this volume is persisted and shared between all stacks
    name: pkg_cache
    external: true
  shared: # this volume is persisted and shared between all stacks
    name: shared
    external: true
  home_config: # this volume is persisted and shared between all stacks
    name: home_config
    external: true

networks:
  devnet:
    name: ${DEVNET_NAME-devnet} # used to communicate between containers and local stack
    external: true

